// Highly divisible triangular number
//
// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be
// 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
//
// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
// Let us list the factors of the first seven triangle numbers:
//
// 1: 1
// 3: 1,3
// 6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.
//
// What is the value of the first triangle number to have over five hundred divisors?

#[test]
fn test() {
  assert_eq!(triangle_number_with_factor_count(5), 28)
}

pub fn solve() -> u128 {
  triangle_number_with_factor_count(500)
}

fn triangle_number_with_factor_count(factors_more_than: u32) -> u128 {
  let mut triangle_number: u128 = 1;
  let mut next_inc: u128 = 2;
  loop {
    if count_factors(triangle_number) > factors_more_than {
      return triangle_number;
    }
    triangle_number += next_inc;
    next_inc += 1;
  }
}

/// Tricky way to count the number of dividers of a number: When p, q, r, ... are the prime factors of the number, and
/// a, b, c, ... are the powers, such that the number equals p^a + q^b + r^c ..., then the number of dividers is the
/// number of combinations of each power plus one (because the power can also be zero in any combination): (a+1) *
/// (b+1) * (c+1) ...
///
/// See also: [this article at Math Doctors](https://www.themathdoctors.org/counting-divisors-of-a-number).
fn count_factors(number: u128) -> u32 {
  let mut factor_count: u32 = 1; // Initialised to 1 because it will be multiplied.
  let mut remaining_number: u128 = number;
  let mut prime_candidate: u128 = 2;
  while prime_candidate <= remaining_number {
    let mut prime_power: u32 = 0;
    while remaining_number % prime_candidate == 0 {
      remaining_number = remaining_number / prime_candidate;
      prime_power += 1
    }
    if prime_power > 0 {
      factor_count *= prime_power + 1;
    }
    prime_candidate += 1
  }
  factor_count
}
